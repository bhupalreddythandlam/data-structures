#include <stdio.h>
#define SIZE 10

int hashTable[SIZE];

void initializeTable() {
    for (int i = 0; i < SIZE; i++)
        hashTable[i] = -1;
}

int hashFunction(int key) {
    return key % SIZE;
}

void insert(int key) {
    int index = hashFunction(key);
    int startIndex = index;

    while (hashTable[index] != -1) {
        index = (index + 1) % SIZE;
        if (index == startIndex) {
            printf("Hash table is full. Cannot insert %d\n", key);
            return;
        }
    }
    hashTable[index] = key;
}

void display() {
    printf("Hash Table:\n");
    for (int i = 0; i < SIZE; i++)
        printf("[%d] => %d\n", i, hashTable[i]);
}

int search(int key) {
    int index = hashFunction(key);
    int startIndex = index;

    while (hashTable[index] != -1) {
        if (hashTable[index] == key)
            return index;
        index = (index + 1) % SIZE;
        if (index == startIndex)
            break;
    }
    return -1;
}

int main() {
    initializeTable();

    insert(23);
    insert(43);
    insert(13);
    insert(27);
    insert(33);

    display();

    int key = 27;
    int result = search(key);
    if (result != -1)
        printf("Key %d found at index %d\n", key, result);
    else
        printf("Key %d not found in the hash table\n", key);

    return 0;
}
